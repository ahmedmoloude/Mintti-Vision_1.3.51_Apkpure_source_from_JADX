package com.haibin.calendarview;

import android.content.Context;

public final class SolarTermUtil {
    private static final double ANGLE_PER_RAD = 57.29577951308232d;
    private static final double[] DTS = {-4000.0d, 108371.7d, -13036.8d, 392.0d, 0.0d, -500.0d, 17201.0d, -627.82d, 16.17d, -0.3413d, -150.0d, 12200.6d, -346.41d, 5.403d, -0.1593d, 150.0d, 9113.8d, -328.13d, -1.647d, 0.0377d, 500.0d, 5707.5d, -391.41d, 0.915d, 0.3145d, 900.0d, 2203.4d, -283.45d, 13.034d, -0.1778d, 1300.0d, 490.1d, -57.35d, 2.085d, -0.0072d, 1600.0d, 120.0d, -9.81d, -1.532d, 0.1403d, 1700.0d, 10.2d, -0.91d, 0.51d, -0.037d, 1800.0d, 13.4d, -0.72d, 0.202d, -0.0193d, 1830.0d, 7.8d, -1.81d, 0.416d, -0.0247d, 1860.0d, 8.3d, -0.13d, -0.406d, 0.0292d, 1880.0d, -5.4d, 0.32d, -0.183d, 0.0173d, 1900.0d, -2.3d, 2.06d, 0.169d, -0.0135d, 1920.0d, 21.2d, 1.69d, -0.304d, 0.0167d, 1940.0d, 24.2d, 1.22d, -0.064d, 0.0031d, 1960.0d, 33.2d, 0.51d, 0.231d, -0.0109d, 1980.0d, 51.0d, 1.29d, -0.026d, 0.0032d, 2000.0d, 64.7d, -1.66d, 5.224d, -0.2905d, 2150.0d, 279.4d, 732.95d, 429.579d, 0.0158d, 6000.0d};
    private static final double[] E10 = {1.75347045673d, 0.0d, 0.0d, 0.03341656456d, 4.66925680417d, 6283.0758499914d, 3.4894275E-4d, 4.62610241759d, 12566.1516999828d, 3.417571E-5d, 2.82886579606d, 3.523118349d, 3.497056E-5d, 2.74411800971d, 5753.3848848968d, 3.135896E-5d, 3.62767041758d, 77713.7714681205d, 2.676218E-5d, 4.41808351397d, 7860.4193924392d, 2.342687E-5d, 6.13516237631d, 3930.2096962196d, 1.273166E-5d, 2.03709655772d, 529.6909650946d, 1.324292E-5d, 0.74246356352d, 11506.7697697936d, 9.01855E-6d, 2.04505443513d, 26.2983197998d, 1.199167E-5d, 1.10962944315d, 1577.3435424478d, 8.57223E-6d, 3.50849156957d, 398.1490034082d, 7.79786E-6d, 1.17882652114d, 5223.6939198022d, 9.9025E-6d, 5.23268129594d, 5884.9268465832d, 7.53141E-6d, 2.53339053818d, 5507.5532386674d, 5.05264E-6d, 4.58292563052d, 18849.2275499742d, 4.92379E-6d, 4.20506639861d, 775.522611324d, 3.56655E-6d, 2.91954116867d, 0.0673103028d, 2.84125E-6d, 1.89869034186d, 796.2980068164d, 2.4281E-6d, 0.34481140906d, 5486.777843175d, 3.17087E-6d, 5.84901952218d, 11790.6290886588d, 2.71039E-6d, 0.31488607649d, 10977.078804699d, 2.0616E-6d, 4.80646606059d, 2544.3144198834d, 2.05385E-6d, 1.86947813692d, 5573.1428014331d, 2.02261E-6d, 2.45767795458d, 6069.7767545534d, 1.26184E-6d, 1.0830263021d, 20.7753954924d, 1.55516E-6d, 0.83306073807d, 213.299095438d, 1.15132E-6d, 0.64544911683d, 0.9803210682d, 1.02851E-6d, 0.63599846727d, 4694.0029547076d, 1.01724E-6d, 4.26679821365d, 7.1135470008d, 9.9206E-7d, 6.20992940258d, 2146.1654164752d, 1.32212E-6d, 3.41118275555d, 2942.4634232916d, 9.7607E-7d, 0.6810127227d, 155.4203994342d, 8.5128E-7d, 1.29870743025d, 6275.9623029906d, 7.4651E-7d, 1.75508916159d, 5088.6288397668d, 1.01895E-6d, 0.97569221824d, 15720.8387848784d, 8.4711E-7d, 3.67080093025d, 71430.6956181291d, 7.3547E-7d, 4.67926565481d, 801.8209311238d, 7.3874E-7d, 3.50319443167d, 3154.6870848956d, 7.8756E-7d, 3.03698313141d, 12036.4607348882d, 7.9637E-7d, 1.807913307d, 17260.1546546904d, 8.5803E-7d, 5.98322631256d, 161000.6857376741d, 5.6963E-7d, 2.78430398043d, 6286.5989683404d, 6.1148E-7d, 1.81839811024d, 7084.8967811152d, 6.9627E-7d, 0.83297596966d, 9437.762934887d, 5.6116E-7d, 4.38694880779d, 14143.4952424306d, 6.2449E-7d, 3.97763880587d, 8827.3902698748d, 5.1145E-7d, 0.28306864501d, 5856.4776591154d, 5.5577E-7d, 3.47006009062d, 6279.5527316424d, 4.1036E-7d, 5.36817351402d, 8429.2412664666d, 5.1605E-7d, 1.33282746983d, 1748.016413067d, 5.1992E-7d, 0.18914945834d, 12139.5535091068d, 4.9E-7d, 0.48735065033d, 1194.4470102246d, 3.92E-7d, 6.16832995016d, 10447.3878396044d, 3.5566E-7d, 1.77597314691d, 6812.766815086d, 3.677E-7d, 6.04133859347d, 10213.285546211d, 3.6596E-7d, 2.56955238628d, 1059.3819301892d, 3.3291E-7d, 0.59309499459d, 17789.845619785d, 3.5954E-7d, 1.70876111898d, 2352.8661537718d};
    private static final double[] E11 = {6283.31966747491d, 0.0d, 0.0d, 0.00206058863d, 2.67823455584d, 6283.0758499914d, 4.30343E-5d, 2.63512650414d, 12566.1516999828d, 4.25264E-6d, 1.59046980729d, 3.523118349d, 1.08977E-6d, 2.96618001993d, 1577.3435424478d, 9.3478E-7d, 2.59212835365d, 18849.2275499742d, 1.19261E-6d, 5.79557487799d, 26.2983197998d, 7.2122E-7d, 1.13846158196d, 529.6909650946d, 6.7768E-7d, 1.87472304791d, 398.1490034082d, 6.7327E-7d, 4.40918235168d, 5507.5532386674d, 5.9027E-7d, 2.8879703846d, 5223.6939198022d, 5.5976E-7d, 2.17471680261d, 155.4203994342d, 4.5407E-7d, 0.39803079805d, 796.2980068164d, 3.6369E-7d, 0.46624739835d, 775.522611324d, 2.8958E-7d, 2.64707383882d, 7.1135470008d, 1.9097E-7d, 1.84628332577d, 5486.777843175d, 2.0844E-7d, 5.34138275149d, 0.9803210682d, 1.8508E-7d, 4.96855124577d, 213.299095438d, 1.6233E-7d, 0.03216483047d, 2544.3144198834d, 1.7293E-7d, 2.99116864949d, 6275.9623029906d};
    private static final double[] E12 = {5.291887E-4d, 0.0d, 0.0d, 8.719837E-5d, 1.07209665242d, 6283.0758499914d, 3.09125E-6d, 0.86728818832d, 12566.1516999828d, 2.7339E-7d, 0.05297871691d, 3.523118349d, 1.6334E-7d, 5.18826691036d, 26.2983197998d, 1.5752E-7d, 3.6845788943d, 155.4203994342d, 9.541E-8d, 0.75742297675d, 18849.2275499742d, 8.937E-8d, 2.05705419118d, 77713.7714681205d, 6.952E-8d, 0.8267330541d, 775.522611324d, 5.064E-8d, 4.66284525271d, 1577.3435424478d};
    private static final double[] E13 = {2.89226E-6d, 5.84384198723d, 6283.0758499914d, 3.4955E-7d, 0.0d, 0.0d, 1.6819E-7d, 5.48766912348d, 12566.1516999828d};
    private static final double[] E14 = {1.14084E-6d, 3.14159265359d, 0.0d, 7.717E-8d, 4.13446589358d, 6283.0758499914d, 7.65E-9d, 3.83803776214d, 12566.1516999828d};
    private static final double[] E15 = {8.78E-9d, 3.14159265359d, 0.0d};
    private static final double[] E20 = {2.7962E-6d, 3.19870156017d, 84334.6615813083d, 1.01643E-6d, 5.42248619256d, 5507.5532386674d, 8.0445E-7d, 3.88013204458d, 5223.6939198022d, 4.3806E-7d, 3.70444689758d, 2352.8661537718d, 3.1933E-7d, 4.00026369781d, 1577.3435424478d, 2.2724E-7d, 3.9847383156d, 1047.7473117547d, 1.6392E-7d, 3.56456119782d, 5856.4776591154d, 1.8141E-7d, 4.98367470263d, 6283.0758499914d, 1.4443E-7d, 3.70275614914d, 9437.762934887d, 1.4304E-7d, 3.41117857525d, 10213.285546211d};
    private static final double[] E21 = {9.03E-8d, 3.8972906189d, 5507.5532386674d, 6.177E-8d, 1.73038850355d, 5223.6939198022d};
    private static final double[] E30 = {1.00013988799d, 0.0d, 0.0d, 0.01670699626d, 3.09846350771d, 6283.0758499914d, 1.3956023E-4d, 3.0552460962d, 12566.1516999828d, 3.08372E-5d, 5.19846674381d, 77713.7714681205d, 1.628461E-5d, 1.17387749012d, 5753.3848848968d, 1.575568E-5d, 2.84685245825d, 7860.4193924392d, 9.24799E-6d, 5.45292234084d, 11506.7697697936d, 5.42444E-6d, 4.56409149777d, 3930.2096962196d};
    private static final double[] E31 = {0.00103018608d, 1.10748969588d, 6283.0758499914d, 1.721238E-5d, 1.06442301418d, 12566.1516999828d, 7.02215E-6d, 3.14159265359d, 0.0d};
    private static final double[] E32 = {4.359385E-5d, 5.78455133738d, 6283.0758499914d};
    private static final double[] E33 = {1.44595E-6d, 4.27319435148d, 6283.0758499914d};
    private static double EnnT = 0.0d;
    private static final double[] GXC_E = {0.016708634d, -4.2037E-5d, -1.267E-7d};
    private static final double GXC_K = 9.936508497454117E-5d;
    private static final double[] GXC_L = {4.89506311081711d, 628.3319667475674d, 5.291887161265863E-6d, 0.0d, 0.0d};
    private static final double[] GXC_P = {1.796595680777785d, 0.030010238356341697d, 8.028514559173916E-6d};
    private static final double[] H_C_ANGLE_TABLE = {0.0d, 50287.92262d, 111.24406d, 0.07699d, -0.23479d, -0.00178d, 1.8E-4d, 1.0E-5d};
    private static final double J2000 = 2451545.0d;
    private static final double[] M10 = {22639.58588d, 2.3555545723d, 8328.6914247251d, 1.5231275E-4d, 2.5041111E-7d, -1.1863391E-9d, 4586.4383203d, 8.0413790709d, 7214.0628654588d, -2.1850087E-4d, -1.8646419E-7d, 8.7760973E-10d, 2369.9139357d, 10.3969336431d, 15542.754290184d, -6.6188121E-5d, 6.3946925E-8d, -3.0872935E-10d, 769.0257187d, 4.7111091445d, 16657.3828494503d, 3.046255E-4d, 5.0082223E-7d, -2.3726782E-9d, -666.4175399d, -0.0431256817d, 628.3019552485d, -2.6638815E-6d, 6.1639211E-10d, -5.4439728E-11d, -411.5957339d, 3.2558104895d, 16866.932315281d, -1.2804259E-4d, -9.8998954E-9d, 4.0433461E-11d, 211.6555524d, 5.6858244986d, -1114.6285592663d, -3.7081362E-4d, -4.368753E-7d, 2.0639488E-9d, 205.435953d, 8.0845047526d, 6585.7609102104d, -2.1583699E-4d, -1.8708058E-7d, 9.3204945E-10d, 191.9561973d, 12.7524882154d, 23871.4457149091d, 8.6124629E-5d, 3.1435804E-7d, -1.4950684E-9d, 164.7286185d, 10.4400593249d, 14914.4523349355d, -6.352424E-5d, 6.3330532E-8d, -2.5428962E-10d, -147.3213842d, -2.398680254d, -7700.3894694766d, -1.5497663E-4d, -2.4979472E-7d, 1.1318993E-9d, -124.9881185d, 5.1984668216d, 7771.377145092d, -3.3094061E-5d, 3.1973462E-8d, -1.5436468E-10d, -109.3803637d, 2.3124288905d, 8956.9933799736d, 1.4964887E-4d, 2.5102751E-7d, -1.2407788E-9d, 55.1770578d, 7.1411231536d, -1324.178025097d, 6.1854469E-5d, 7.384682E-8d, -3.4916281E-10d, -45.0996092d, 5.6113650618d, 25195.6237400061d, 2.4270161E-5d, 2.4051122E-7d, -1.1459056E-9d, 39.533301d, -0.9002559173d, -8538.2408905558d, 2.8035534E-4d, 2.6031101E-7d, -1.2267725E-9d, 38.4298346d, 18.438312714d, 22756.8171556428d, -2.8468899E-4d, -1.2251727E-7d, 5.6888037E-10d, 36.1238141d, 7.0666637168d, 24986.0742741754d, 4.5693825E-4d, 7.5123334E-7d, -3.5590172E-9d, 30.7725751d, 16.0827581417d, 14428.1257309177d, -4.3700174E-4d, -3.7292838E-7d, 1.7552195E-9d, -28.3971008d, 7.9982533891d, 7842.3648207073d, -2.2116475E-4d, -1.858478E-7d, 8.2317E-10d, -24.3582283d, 10.3538079614d, 16171.0562454324d, -6.8852003E-5d, 6.4563317E-8d, -3.6316908E-10d, -18.5847068d, 2.8429122493d, -557.3142796331d, -1.8540681E-4d, -2.1843765E-7d, 1.0319744E-9d, 17.9544674d, 5.1553411398d, 8399.6791003405d, -3.5757942E-5d, 3.2589854E-8d, -2.088044E-10d, 14.5302779d, 12.7956138971d, 23243.1437596606d, 8.8788511E-5d, 3.1374165E-7d, -1.4406287E-9d, 14.3796974d, 15.1080427876d, 32200.1371396342d, 2.3843738E-4d, 5.6476915E-7d, -2.6814075E-9d, 14.2514576d, -24.081036632d, -2.3011998397d, 1.5231275E-4d, 2.5041111E-7d, -1.1863391E-9d, 13.8990596d, 20.7938672862d, 31085.5085803679d, -1.3237624E-4d, 1.2789385E-7d, -6.174587E-10d, 13.1940636d, 3.3302699264d, -9443.3199839914d, -5.2312637E-4d, -6.8728642E-7d, 3.2502879E-9d, -9.6790568d, -4.7542348263d, -16029.0808942018d, -3.0728938E-4d, -5.0020584E-7d, 2.3182384E-9d, -9.3658635d, 11.2971895604d, 24080.9951807398d, -3.4654346E-4d, -1.9636409E-7d, 9.1804319E-10d, 8.6055318d, 5.7289501804d, -1742.9305145148d, -3.6814974E-4d, -4.374917E-7d, 2.1183885E-9d, -8.4530982d, 7.5540213938d, 16100.0685698171d, 1.1921869E-4d, 2.8238458E-7d, -1.3407038E-9d, 8.0501724d, 10.4831850066d, 14286.150379687d, -6.0860358E-5d, 6.271414E-8d, -1.998499E-10d, -7.6301553d, 4.6679834628d, 17285.6848046987d, 3.0196162E-4d, 5.0143862E-7d, -2.4271179E-9d, -7.4474952d, -0.0862513635d, 1256.603910497d, -5.327763E-6d, 1.2327842E-9d, -1.0887946E-10d, 7.3712011d, 8.1276304344d, 5957.4589549619d, -2.1317311E-4d, -1.8769697E-7d, 9.8648918E-10d, 7.06299d, 0.9591375719d, 33.7570471374d, -3.0829302E-5d, -3.6967043E-8d, 1.7385419E-10d, -6.3831491d, 9.4966777258d, 7004.5133996281d, 2.1416722E-4d, 3.2425793E-7d, -1.5355019E-9d, -5.7416071d, 13.6527441326d, 32409.6866054649d, -1.9423071E-4d, 5.4047029E-8d, -2.6829589E-10d, 4.3740095d, 18.4814383957d, 22128.5152003943d, -2.8202511E-4d, -1.2313366E-7d, 6.233201E-10d, -3.9976134d, 7.966919634d, 33524.3151647312d, 1.7658291E-4d, 4.9092233E-7d, -2.3322447E-9d, -3.2096876d, 13.2398458924d, 14985.4400105508d, -2.5159493E-4d, -1.5449073E-7d, 7.2324505E-10d, -2.9145404d, 12.7093625336d, 24499.7476701576d, 8.3460748E-5d, 3.1497443E-7d, -1.5495082E-9d, 2.731889d, 16.1258838235d, 13799.8237756692d, -4.3433786E-4d, -3.7354477E-7d, 1.8096592E-9d, -2.5679459d, -2.4418059357d, -7072.0875142282d, -1.5764051E-4d, -2.4917833E-7d, 1.0774596E-9d, -2.521199d, 7.9551277074d, 8470.6667759558d, -2.2382863E-4d, -1.8523141E-7d, 7.6873027E-10d, 2.4888871d, 5.6426988169d, -486.3266040178d, -3.734775E-4d, -4.3625891E-7d, 2.0095091E-9d, 2.1460741d, 7.1842488353d, -1952.4799803455d, 6.451835E-5d, 7.3230428E-8d, -2.9472308E-10d, 1.977727d, 23.1494218585d, 39414.200005093d, 1.9936508E-5d, 3.7830496E-7d, -1.8037978E-9d, 1.9336825d, 9.422218289d, 33314.7656989005d, 6.09251E-4d, 1.0016445E-6d, -4.7453563E-9d, 1.8707647d, 20.836992968d, 30457.2066251194d, -1.2971236E-4d, 1.2727746E-7d, -5.6301898E-10d, -1.7529659d, 0.4873576771d, -8886.0057043583d, -3.3771956E-4d, -4.6884877E-7d, 2.2183135E-9d, -1.4371624d, 7.0979974718d, -695.8760698485d, 5.9190587E-5d, 7.4463212E-8d, -4.0360254E-10d, -1.3725701d, 1.455298655d, -209.5494658307d, 4.3266809E-4d, 5.1072212E-7d, -2.4131116E-9d, 1.2618162d, 7.5108957121d, 16728.3705250656d, 1.1655481E-4d, 2.8300097E-7d, -1.3951435E-9d};
    private static final double[] M11 = {1.6768d, -0.0431256817d, 628.3019552485d, -2.6638815E-6d, 6.1639211E-10d, -5.4439728E-11d, 0.51642d, 11.2260974062d, 6585.7609102104d, -2.1583699E-4d, -1.8708058E-7d, 9.3204945E-10d, 0.41383d, 13.5816519784d, 14914.4523349355d, -6.352424E-5d, 6.3330532E-8d, -2.5428962E-10d, 0.37115d, 5.5402729076d, 7700.3894694766d, 1.5497663E-4d, 2.4979472E-7d, -1.1318993E-9d, 0.2756d, 2.3124288905d, 8956.9933799736d, 1.4964887E-4d, 2.5102751E-7d, -1.2407788E-9d, 0.2459863d, -25.6198212459d, -2.3011998397d, 1.5231275E-4d, 2.5041111E-7d, -1.1863391E-9d, 0.07118d, 7.9982533891d, 7842.3648207073d, -2.2116475E-4d, -1.858478E-7d, 8.2317E-10d, 0.06128d, 10.3538079614d, 16171.0562454324d, -6.8852003E-5d, 6.4563317E-8d, -3.6316908E-10d};
    private static final double[] M12 = {0.00487d, -0.0431256817d, 628.3019552485d, -2.6638815E-6d, 6.1639211E-10d, -5.4439728E-11d, 0.00228d, -27.1705318325d, -2.3011998397d, 1.5231275E-4d, 2.5041111E-7d, -1.1863391E-9d, 0.0015d, 11.2260974062d, 6585.7609102104d, -2.1583699E-4d, -1.8708058E-7d, 9.3204945E-10d};
    private static final double[] M1n = {3.81034392032d, 8399.68473021d, -3.31919929753E-5d, 3.20170955005E-8d, -1.53637455544E-10d};
    private static final double[] M20 = {18461.24006d, 1.6279052448d, 8433.4661576405d, -6.4021295E-5d, -4.9499477E-9d, 2.0216731E-11d, 1010.1671484d, 3.983459817d, 16762.1575823656d, 8.8291456E-5d, 2.4546117E-7d, -1.1661223E-9d, 999.6936555d, 0.7276493275d, -104.7747329154d, 2.1633405E-4d, 2.5536106E-7d, -1.2065558E-9d, 623.6524746d, 8.7690283983d, 7109.2881325435d, -2.1668263E-6d, 6.8896872E-8d, -3.2894608E-10d, 199.4837596d, 9.6692843156d, 15647.5290230993d, -2.8252217E-4d, -1.9141414E-7d, 8.9782646E-10d, 166.5741153d, 6.4134738261d, -1219.4032921817d, -1.5447958E-4d, -1.8151424E-7d, 8.57393E-10d, 117.2606951d, 12.0248388879d, 23976.2204478244d, -1.3020942E-4d, 5.8996977E-8d, -2.8851262E-10d, 61.9119504d, 6.3390143893d, 25090.8490070907d, 2.4060421E-4d, 4.9587228E-7d, -2.3524614E-9d, 33.3572027d, 11.1245829706d, 15437.9795572686d, 1.5014592E-4d, 3.1930799E-7d, -1.5152852E-9d, 31.7596709d, 3.0832038997d, 8223.9166918098d, 3.686468E-4d, 5.0577218E-7d, -2.3928949E-9d, 29.5766003d, 8.8121540801d, 6480.986177295d, 4.9705523E-7d, 6.828048E-8d, -2.7450635E-10d, 15.5662654d, 4.0579192538d, -9548.0947169068d, -3.0679233E-4d, -4.3192536E-7d, 2.0437321E-9d, 15.1215543d, 14.3803934601d, 32304.9118725496d, 2.2103334E-5d, 3.0940809E-7d, -1.4748517E-9d, -12.0941511d, 8.7259027166d, 7737.590087792d, -4.8307078E-6d, 6.9513264E-8d, -3.8338581E-10d, 8.8681426d, 9.7124099974d, 15019.2270678508d, -2.7985829E-4d, -1.9203053E-7d, 9.5226618E-10d, 8.04504d, 0.6687636586d, 8399.709110503d, -3.3191993E-5d, 3.2017096E-8d, -1.5363746E-10d, 7.9585542d, 12.0679645696d, 23347.918492576d, -1.2754553E-4d, 5.8380585E-8d, -2.3407289E-10d, 7.434555d, 6.4565995078d, -1847.7052474301d, -1.518157E-4d, -1.8213063E-7d, 9.1183272E-10d, -6.7314363d, -4.0265854988d, -16133.8556271171d, -9.0955337E-5d, -2.4484477E-7d, 1.1116826E-9d, 6.579575d, 16.8104074692d, 14323.3509980023d, -2.206677E-4d, -1.1756732E-7d, 5.4866364E-10d, -6.4600721d, 1.584779563d, 9061.768112889d, -6.6685176E-5d, -4.3335556E-9d, -3.4222998E-11d, -6.2964773d, 4.8837157343d, 25300.3984729215d, -1.9206388E-4d, -1.4849843E-8d, 6.0650192E-11d, -5.6323538d, -0.7707750092d, 733.0766881638d, -2.1899793E-4d, -2.5474467E-7d, 1.1521161E-9d, -5.3683961d, 6.8263720663d, 16204.8433027325d, -9.7115356E-5d, 2.7023515E-8d, -1.3414795E-10d, -5.3112784d, 3.9403341353d, 17390.4595376141d, 8.5627574E-5d, 2.4607756E-7d, -1.2205621E-9d, -5.0759179d, 0.6845236457d, 523.5272223331d, 2.1367016E-4d, 2.5597745E-7d, -1.2609955E-9d, -4.8396143d, -1.6710309265d, -7805.164202392d, 6.1357413E-5d, 5.5663398E-9d, -7.4656459E-11d, -4.8057401d, 3.5705615768d, -662.0890125485d, 3.0927234E-5d, 3.692341E-8d, -1.7458141E-10d, 3.9840545d, 8.6945689615d, 33419.5404318159d, 3.9291696E-4d, 7.462834E-7d, -3.5388005E-9d, 3.6744619d, 19.1659620415d, 22652.0424227274d, -6.8354947E-5d, 1.328438E-7d, -6.3767543E-10d, 2.9984815d, 20.0662179587d, 31190.2833132833d, -3.4871029E-4d, -1.2746721E-7d, 5.890971E-10d, 2.7986413d, -2.528161162d, -16971.7070481963d, 3.4437664E-4d, 2.6526096E-7d, -1.2469893E-9d, 2.4138774d, 17.7106633865d, 22861.5918885581d, -5.0102304E-4d, -3.7787833E-7d, 1.7754362E-9d, 2.1863132d, 5.5132179088d, -9757.6441827375d, 1.2587576E-4d, 7.8796768E-8d, -3.6937954E-10d, 2.1461692d, 13.4801375428d, 23766.6709819937d, 3.0245868E-4d, 5.697191E-7d, -2.7016242E-9d, 1.7659832d, 11.1677086523d, 14809.6776020201d, 1.5280981E-4d, 3.1869159E-7d, -1.4608454E-9d, -1.6244212d, 7.3137297434d, 7318.8375983742d, -4.3483492E-4d, -4.4182525E-7d, 2.0841655E-9d, 1.5813036d, 5.438758472d, 16552.6081165349d, 5.2095955E-4d, 7.5618329E-7d, -3.579234E-9d, 1.5197528d, 16.7359480324d, 40633.6032972747d, 1.7441609E-4d, 5.5981921E-7d, -2.6611908E-9d, 1.5156341d, 1.7023646816d, -17876.7861416319d, -4.5910508E-4d, -6.8233647E-7d, 3.2300712E-9d, 1.5102092d, 5.497729645d, 8399.6847301375d, -3.3094061E-5d, 3.1973462E-8d, -1.5436468E-10d, -1.3178223d, 9.6261586339d, 16275.8309783478d, -2.8518605E-4d, -1.9079775E-7d, 8.4338673E-10d, -1.2642739d, 11.9817132061d, 24604.5224030729d, -1.328733E-4d, 5.9613369E-8d, -3.4295235E-10d, 1.1918723d, 22.421772531d, 39518.9747380084d, -1.9639754E-4d, 1.229439E-7d, -5.9724197E-10d, 1.134611d, 14.4235191419d, 31676.6099173011d, 2.4767216E-5d, 3.087917E-7d, -1.420412E-9d, 1.085781d, 8.8552797618d, 5852.6842220465d, 3.1609367E-6d, 6.7664088E-8d, -2.2006663E-10d, -1.0193852d, 7.2392703065d, 33629.0898976466d, -3.9751134E-5d, 2.3556127E-7d, -1.1256889E-9d, -0.8227141d, 11.0814572888d, 16066.2815125171d, 1.4748204E-4d, 3.1992438E-7d, -1.5697249E-9d, 0.8042238d, 3.527435895d, -33.7870573d, 2.8263353E-5d, 3.7539802E-8d, -2.2902113E-10d, 0.8025939d, 6.7832463846d, 16833.1452579809d, -9.9779237E-5d, 2.7639907E-8d, -1.8858767E-10d, -0.7931866d, -6.382140071d, -24462.5470518423d, -2.4326809E-4d, -4.9525589E-7d, 2.2980217E-9d, -0.7910153d, 6.3703481443d, -591.1013369332d, -1.5714346E-4d, -1.8089785E-7d, 8.0295327E-10d, -0.6674056d, 9.1819266386d, 24533.5347274576d, 5.5197395E-5d, 2.7743463E-7d, -1.320487E-9d, 0.6502226d, 4.1010449356d, -10176.3966721553d, -3.0412845E-4d, -4.3254175E-7d, 2.0981718E-9d, -0.6388131d, 6.2958887075d, 25719.1509623392d, 2.3794032E-4d, 4.9648867E-7d, -2.4069012E-9d};
    private static final double[] M21 = {0.0743d, 11.9537467337d, 6480.986177295d, 4.9705523E-7d, 6.828048E-8d, -2.7450635E-10d, 0.03043d, 8.7259027166d, 7737.590087792d, -4.8307078E-6d, 6.9513264E-8d, -3.8338581E-10d, 0.02229d, 12.854002651d, 15019.2270678508d, -2.7985829E-4d, -1.9203053E-7d, 9.5226618E-10d, 0.01999d, 15.2095572232d, 23347.918492576d, -1.2754553E-4d, 5.8380585E-8d, -2.3407289E-10d, 0.01869d, 9.5981921614d, -1847.7052474301d, -1.518157E-4d, -1.8213063E-7d, 9.1183272E-10d, 0.01696d, 7.1681781524d, 16133.8556271171d, 9.0955337E-5d, 2.4484477E-7d, -1.1116826E-9d, 0.01623d, 1.584779563d, 9061.768112889d, -6.6685176E-5d, -4.3335556E-9d, -3.4222998E-11d, 0.01419d, -0.7707750092d, 733.0766881638d, -2.1899793E-4d, -2.5474467E-7d, 1.1521161E-9d};
    private static final double[] M30 = {385000.5290396d, 1.5707963268d, 0.0d, 0.0d, 0.0d, 0.0d, -20905.3551378d, 3.926350899d, 8328.6914247251d, 1.5231275E-4d, 2.5041111E-7d, -1.1863391E-9d, -3699.110933d, 9.6121753977d, 7214.0628654588d, -2.1850087E-4d, -1.8646419E-7d, 8.7760973E-10d, -2955.9675626d, 11.9677299699d, 15542.754290184d, -6.6188121E-5d, 6.3946925E-8d, -3.0872935E-10d, -569.9251264d, 6.2819054713d, 16657.3828494503d, 3.046255E-4d, 5.0082223E-7d, -2.3726782E-9d, 246.1584797d, 7.2566208254d, -1114.6285592663d, -3.7081362E-4d, -4.368753E-7d, 2.0639488E-9d, -204.5861179d, 12.0108556517d, 14914.4523349355d, -6.352424E-5d, 6.3330532E-8d, -2.5428962E-10d, -170.7330791d, 14.3232845422d, 23871.4457149091d, 8.6124629E-5d, 3.1435804E-7d, -1.4950684E-9d, -152.1378118d, 9.6553010794d, 6585.7609102104d, -2.1583699E-4d, -1.8708058E-7d, 9.3204945E-10d, -129.6202242d, -0.8278839272d, -7700.3894694766d, -1.5497663E-4d, -2.4979472E-7d, 1.1318993E-9d, 108.7427014d, 6.7692631483d, 7771.377145092d, -3.3094061E-5d, 3.1973462E-8d, -1.5436468E-10d, 104.7552944d, 3.8832252173d, 8956.9933799736d, 1.4964887E-4d, 2.5102751E-7d, -1.2407788E-9d, 79.6605685d, 0.6705404095d, -8538.2408905558d, 2.8035534E-4d, 2.6031101E-7d, -1.2267725E-9d, 48.8883284d, 1.527670645d, 628.3019552485d, -2.6638815E-6d, 6.1639211E-10d, -5.4439728E-11d, -34.7825237d, 20.0091090408d, 22756.8171556428d, -2.8468899E-4d, -1.2251727E-7d, 5.6888037E-10d, 30.8238599d, 11.9246042882d, 16171.0562454324d, -6.8852003E-5d, 6.4563317E-8d, -3.6316908E-10d, 24.2084985d, 9.5690497159d, 7842.3648207073d, -2.2116475E-4d, -1.858478E-7d, 8.2317E-10d, -23.2104305d, 8.6374600436d, 24986.0742741754d, 4.5693825E-4d, 7.5123334E-7d, -3.5590172E-9d, -21.6363439d, 17.6535544685d, 14428.1257309177d, -4.3700174E-4d, -3.7292838E-7d, 1.7552195E-9d, -16.6747239d, 6.7261374666d, 8399.6791003405d, -3.5757942E-5d, 3.2589854E-8d, -2.088044E-10d, 14.402689d, 4.9010662531d, -9443.3199839914d, -5.2312637E-4d, -6.8728642E-7d, 3.2502879E-9d, -12.8314035d, 14.3664102239d, 23243.1437596606d, 8.8788511E-5d, 3.1374165E-7d, -1.4406287E-9d, -11.6499478d, 22.364663613d, 31085.5085803679d, -1.3237624E-4d, 1.2789385E-7d, -6.174587E-10d, -10.4447578d, 16.6788391144d, 32200.1371396342d, 2.3843738E-4d, 5.6476915E-7d, -2.6814075E-9d, 10.3211071d, 8.7119194804d, -1324.178025097d, 6.1854469E-5d, 7.384682E-8d, -3.4916281E-10d, 10.0562033d, 7.2997465071d, -1742.9305145148d, -3.6814974E-4d, -4.374917E-7d, 2.1183885E-9d, -9.8844667d, 12.0539813334d, 14286.150379687d, -6.0860358E-5d, 6.271414E-8d, -1.998499E-10d, 8.7515625d, 6.3563649081d, -9652.8694498221d, -9.0458282E-5d, -1.7656429E-7d, 8.3717626E-10d, -8.3791067d, 4.4137085761d, -557.3142796331d, -1.8540681E-4d, -2.1843765E-7d, 1.0319744E-9d, -7.0026961d, -3.1834384995d, -16029.0808942018d, -3.0728938E-4d, -5.0020584E-7d, 2.3182384E-9d, 6.3220032d, 9.1248177206d, 16100.0685698171d, 1.1921869E-4d, 2.8238458E-7d, -1.3407038E-9d, 5.7508579d, 6.2387797896d, 17285.6848046987d, 3.0196162E-4d, 5.0143862E-7d, -2.4271179E-9d, -4.9501349d, 9.6984267611d, 5957.4589549619d, -2.1317311E-4d, -1.8769697E-7d, 9.8648918E-10d, -4.421177d, 3.0260949818d, -209.5494658307d, 4.3266809E-4d, 5.1072212E-7d, -2.4131116E-9d, 4.1311145d, 11.0674740526d, 7004.5133996281d, 2.1416722E-4d, 3.2425793E-7d, -1.5355019E-9d, -3.9579827d, 20.0522347225d, 22128.5152003943d, -2.8202511E-4d, -1.2313366E-7d, 6.233201E-10d, 3.2582371d, 14.8106422192d, 14985.4400105508d, -2.5159493E-4d, -1.5449073E-7d, 7.2324505E-10d, -3.148302d, 4.8266068163d, 16866.932315281d, -1.2804259E-4d, -9.8998954E-9d, 4.0433461E-11d, 2.6164092d, 14.2801588604d, 24499.7476701576d, 8.3460748E-5d, 3.1497443E-7d, -1.5495082E-9d, 2.353631d, 9.5259240342d, 8470.6667759558d, -2.2382863E-4d, -1.8523141E-7d, 7.6873027E-10d, -2.1171283d, -0.871009609d, -7072.0875142282d, -1.5764051E-4d, -2.4917833E-7d, 1.0774596E-9d, -1.8970368d, 17.6966801503d, 13799.8237756692d, -4.3433786E-4d, -3.7354477E-7d, 1.8096592E-9d, -1.7385258d, 2.0581540038d, -8886.0057043583d, -3.3771956E-4d, -4.6884877E-7d, 2.2183135E-9d, -1.5713944d, 22.4077892948d, 30457.2066251194d, -1.2971236E-4d, 1.2727746E-7d, -5.6301898E-10d, -1.4225541d, 24.7202181853d, 39414.200005093d, 1.9936508E-5d, 3.7830496E-7d, -1.8037978E-9d, -1.4189284d, 17.1661967915d, 23314.1314352759d, -9.9282182E-5d, 9.5920387E-8d, -4.6309403E-10d, 1.1655364d, 3.8400995356d, 9585.2953352221d, 1.4698499E-4d, 2.516439E-7d, -1.2952185E-9d, -1.1169371d, 10.9930146158d, 33314.7656989005d, 6.09251E-4d, 1.0016445E-6d, -4.7453563E-9d, 1.0656723d, 1.4845449633d, 1256.603910497d, -5.327763E-6d, 1.2327842E-9d, -1.0887946E-10d, 1.058619d, 11.9220903668d, 8364.7398411275d, -2.1850087E-4d, -1.8646419E-7d, 8.7760973E-10d, -0.9333176d, 9.0816920389d, 16728.3705250656d, 1.1655481E-4d, 2.8300097E-7d, -1.3951435E-9d, 0.8624328d, 12.455087647d, 6656.7485858257d, -4.0390768E-4d, -4.0490184E-7d, 1.9095841E-9d, 0.8512404d, 4.3705828944d, 70.9876756153d, -1.8807069E-4d, -2.1782126E-7d, 9.7753467E-10d, -0.8488018d, 16.7219647962d, 31571.8351843857d, 2.4110126E-4d, 5.6415276E-7d, -2.6269678E-9d, -0.7956264d, 3.5134526588d, -9095.555170189d, 9.4948529E-5d, 4.1873358E-8d, -1.9479814E-10d};
    private static final double[] M31 = {0.51395d, 12.0108556517d, 14914.4523349355d, -6.352424E-5d, 6.3330532E-8d, -2.5428962E-10d, 0.38245d, 9.6553010794d, 6585.7609102104d, -2.1583699E-4d, -1.8708058E-7d, 9.3204945E-10d, 0.32654d, 3.9694765808d, 7700.3894694766d, 1.5497663E-4d, 2.4979472E-7d, -1.1318993E-9d, 0.26396d, 0.7416325637d, 8956.9933799736d, 1.4964887E-4d, 2.5102751E-7d, -1.2407788E-9d, 0.12302d, -1.6139220085d, 628.3019552485d, -2.6638815E-6d, 6.1639211E-10d, -5.4439728E-11d, 0.07754d, 8.7830116346d, 16171.0562454324d, -6.8852003E-5d, 6.4563317E-8d, -3.6316908E-10d, 0.06068d, 6.4274570623d, 7842.3648207073d, -2.2116475E-4d, -1.858478E-7d, 8.2317E-10d, 0.0497d, 12.0539813334d, 14286.150379687d, -6.0860358E-5d, 6.271414E-8d, -1.998499E-10d};
    private static double MnnT = 0.0d;
    private static final double SECOND_PER_RAD = 206264.80624709636d;
    private static String[] SOLAR_TERMS;
    private static final double[] nutB = {2.1824391966d, -33.757045954d, 3.62262E-5d, 3.734E-8d, -2.8793E-10d, -171996.0d, -1742.0d, 92025.0d, 89.0d, 3.5069406862d, 1256.663930738d, 1.05845E-5d, 6.9813E-10d, -2.2815E-10d, -13187.0d, -16.0d, 5736.0d, -31.0d, 1.3375032491d, 16799.418221925d, -5.11866E-5d, 6.4626E-8d, -5.3543E-10d, -2274.0d, -2.0d, 977.0d, -5.0d, 4.3648783932d, -67.514091907d, 7.24525E-5d, 7.4681E-8d, -5.7586E-10d, 2062.0d, 2.0d, -895.0d, 5.0d, 0.0431251803d, -628.301955171d, 2.682E-6d, 6.5935E-10d, 5.5705E-11d, -1426.0d, 34.0d, 54.0d, -1.0d, 2.3555557435d, 8328.691425719d, 1.545547E-4d, 2.5033E-7d, -1.1863E-9d, 712.0d, 1.0d, -7.0d, 0.0d, 3.4638155059d, 1884.965885909d, 7.9025E-6d, 3.8785E-11d, -2.8386E-10d, -517.0d, 12.0d, 224.0d, -6.0d, 5.4382493597d, 16833.175267879d, -8.74129E-5d, 2.7285E-8d, -2.475E-10d, -386.0d, -4.0d, 200.0d, 0.0d, 3.6930589926d, 25128.109647645d, 1.033681E-4d, 3.1496E-7d, -1.7218E-9d, -301.0d, 0.0d, 129.0d, -1.0d, 3.5500658664d, 628.361975567d, 1.32664E-5d, 1.3575E-9d, -1.7245E-10d, 217.0d, -5.0d, -95.0d, 3.0d};

    private static double rad2mrad(double d) {
        double d2 = d % 6.283185307179586d;
        return d2 < 0.0d ? d2 + 6.283185307179586d : d2;
    }

    static void init(Context context) {
        SOLAR_TERMS = context.getResources().getStringArray(C1484R.array.solar_term);
    }

    private static double doubleFloor(double d) {
        double floor = Math.floor(d);
        return floor < 0.0d ? floor + 1.0d : floor;
    }

    private static double worldTimeDiff(double d) {
        int i = 0;
        while (i < 100) {
            int i2 = i + 5;
            if (d < DTS[i2] || i == 95) {
                break;
            }
            i = i2;
        }
        double[] dArr = DTS;
        double d2 = ((d - dArr[i]) / (dArr[i + 5] - dArr[i])) * 10.0d;
        double d3 = d2 * d2;
        return dArr[i + 1] + (dArr[i + 2] * d2) + (dArr[i + 3] * d3) + (dArr[i + 4] * d3 * d2);
    }

    private static double atomTimeDiff(double d) {
        return worldTimeDiff((d / 365.2425d) + 2000.0d) / 86400.0d;
    }

    private static double toJulian(Time time, boolean z) {
        double d;
        double access$000 = time.year;
        double access$100 = time.month;
        if (access$100 <= 2.0d) {
            access$100 += 12.0d;
            access$000 -= 1.0d;
        }
        if ((time.year * 372.0d) + (time.month * 31.0d) + time.day >= 588829.0d) {
            double doubleFloor = doubleFloor(access$000 / 100.0d);
            d = (2.0d - doubleFloor) + doubleFloor(doubleFloor / 4.0d);
        } else {
            d = 0.0d;
        }
        double doubleFloor2 = d + doubleFloor((access$000 + 4716.0d) * 365.2500001d) + doubleFloor((access$100 + 1.0d) * 30.6d) + time.day + ((((((time.second / 60.0d) + time.minute) / 60.0d) + time.hour) / 24.0d) - 1524.5d);
        return z ? doubleFloor2 + atomTimeDiff(doubleFloor2 - J2000) : doubleFloor2;
    }

    private static Time setFromJulian(double d, boolean z) {
        Time time = new Time();
        if (z) {
            d -= atomTimeDiff(d - J2000);
        }
        double d2 = d + 0.5d;
        double doubleFloor = doubleFloor(d2);
        double d3 = d2 - doubleFloor;
        if (doubleFloor > 2299161.0d) {
            double doubleFloor2 = doubleFloor((doubleFloor - 1867216.25d) / 36524.25d);
            doubleFloor += (1.0d + doubleFloor2) - doubleFloor(doubleFloor2 / 4.0d);
        }
        double d4 = doubleFloor + 1524.0d;
        double unused = time.year = doubleFloor((d4 - 122.1d) / 365.25d);
        double doubleFloor3 = d4 - doubleFloor(time.year * 365.25d);
        double unused2 = time.month = doubleFloor(doubleFloor3 / 30.6001d);
        double unused3 = time.day = doubleFloor3 - doubleFloor(time.month * 30.6001d);
        double unused4 = time.year = time.year - 4716.0d;
        Time.access$110(time);
        if (time.month > 12.0d) {
            double unused5 = time.month = time.month - 12.0d;
        }
        if (time.month <= 2.0d) {
            Time.access$008(time);
        }
        double d5 = d3 * 24.0d;
        double unused6 = time.hour = doubleFloor(d5);
        double access$500 = (d5 - time.hour) * 60.0d;
        double unused7 = time.minute = doubleFloor(access$500);
        double unused8 = time.second = (access$500 - time.minute) * 60.0d;
        return time;
    }

    private static void precession(double d, double[] dArr) {
        double d2 = d / 365250.0d;
        double d3 = 1.0d;
        double d4 = 0.0d;
        for (int i = 1; i < 8; i++) {
            d3 *= d2;
            d4 += H_C_ANGLE_TABLE[i] * d3;
        }
        dArr[0] = rad2mrad(dArr[0] + ((d4 + (d2 * 2.9965d)) / SECOND_PER_RAD));
    }

    private static void addGxc(double d, double[] dArr) {
        double d2 = d / 36525.0d;
        double d3 = d2 * d2;
        double d4 = d3 * d2;
        double[] dArr2 = GXC_L;
        double d5 = dArr2[0] + (dArr2[1] * d2) + (dArr2[2] * d3) + (dArr2[3] * d4) + (dArr2[4] * d4 * d2);
        double[] dArr3 = GXC_P;
        double d6 = dArr3[0] + (dArr3[1] * d2) + (dArr3[2] * d3);
        double[] dArr4 = GXC_E;
        double d7 = dArr4[0] + (dArr4[1] * d2) + (dArr4[2] * d3);
        double d8 = d5 - dArr[0];
        double d9 = d6 - dArr[0];
        dArr[0] = dArr[0] - (((Math.cos(d8) - (Math.cos(d9) * d7)) * GXC_K) / Math.cos(dArr[1]));
        dArr[1] = dArr[1] - ((Math.sin(dArr[1]) * GXC_K) * (Math.sin(d8) - (d7 * Math.sin(d9))));
        dArr[0] = rad2mrad(dArr[0]);
    }

    private static Nutation nutation(double d) {
        Nutation nutation = new Nutation();
        double unused = nutation.Lon = 0.0d;
        double unused2 = nutation.Obl = 0.0d;
        double d2 = d / 36525.0d;
        double d3 = d2 * d2;
        double d4 = d3 * d2;
        double d5 = d4 * d2;
        int i = 0;
        while (true) {
            double[] dArr = nutB;
            if (i < dArr.length) {
                double d6 = dArr[i] + (dArr[i + 1] * d2) + (dArr[i + 2] * d3) + (dArr[i + 3] * d4) + (dArr[i + 4] * d5);
                double unused3 = nutation.Lon = nutation.Lon + ((dArr[i + 5] + ((dArr[i + 6] * d2) / 10.0d)) * Math.sin(d6));
                double unused4 = nutation.Obl = nutation.Obl + ((dArr[i + 7] + ((dArr[i + 8] * d2) / 10.0d)) * Math.cos(d6));
                i += 9;
            } else {
                double unused5 = nutation.Lon = nutation.Lon / 2.0626480624709637E9d;
                double unused6 = nutation.Obl = nutation.Obl / 2.0626480624709637E9d;
                return nutation;
            }
        }
    }

    private static double Enn(double[] dArr) {
        double d = 0.0d;
        for (int i = 0; i < dArr.length; i += 3) {
            d += dArr[i] * Math.cos(dArr[i + 1] + (EnnT * dArr[i + 2]));
        }
        return d;
    }

    private static double[] earCal(double d) {
        double d2 = d / 365250.0d;
        EnnT = d2;
        double d3 = d2 * d2;
        double d4 = d3 * d2;
        double d5 = d4 * d2;
        double[] dArr = {Enn(E10) + (Enn(E11) * d2) + (Enn(E12) * d3) + (Enn(E13) * d4) + (Enn(E14) * d5) + (Enn(E15) * d5 * d2), Enn(E20) + (Enn(E21) * d2), Enn(E30) + (Enn(E31) * d2) + (Enn(E32) * d3) + (Enn(E33) * d4)};
        dArr[0] = rad2mrad(dArr[0]);
        return dArr;
    }

    private static double Mnn(double[] dArr) {
        double[] dArr2 = dArr;
        double d = MnnT;
        double d2 = d * d;
        double d3 = d2 * d;
        double d4 = d3 * d;
        double d5 = 0.0d;
        for (int i = 0; i < dArr2.length; i += 6) {
            d5 += dArr2[i] * Math.sin(dArr2[i + 1] + (dArr2[i + 2] * d) + (dArr2[i + 3] * d2) + (dArr2[i + 4] * d3) + (dArr2[i + 5] * d4));
        }
        return d5;
    }

    private static double[] moonCoord(double d) {
        double d2 = d;
        double d3 = d2 / 36525.0d;
        MnnT = d3;
        double d4 = d3 * d3;
        double d5 = d4 * d3;
        double[] dArr = {((Mnn(M10) + (Mnn(M11) * d3)) + (Mnn(M12) * d4)) / SECOND_PER_RAD, (Mnn(M20) + (Mnn(M21) * d3)) / SECOND_PER_RAD, (Mnn(M30) + (Mnn(M31) * d3)) * 0.999999949827d};
        double d6 = dArr[0];
        double[] dArr2 = M1n;
        dArr[0] = d6 + dArr2[0] + (dArr2[1] * d3) + (dArr2[2] * d4) + (dArr2[3] * d5) + (dArr2[4] * d5 * d3);
        dArr[0] = rad2mrad(dArr[0]);
        precession(d2, dArr);
        return dArr;
    }

    private static double angleDiff(int i, double d, double d2) {
        double[] earCal = earCal(d);
        earCal[0] = earCal[0] + 3.141592653589793d;
        earCal[1] = -earCal[1];
        addGxc(d, earCal);
        if (i != 0) {
            return rad2mrad(d2 - (moonCoord(d)[0] - earCal[0]));
        }
        earCal[0] = earCal[0] + nutation(d).Lon;
        return rad2mrad(d2 - earCal[0]);
    }

    private static double getTimeFromAngle(double d, double d2, int i) {
        double d3;
        double d4 = d;
        int i2 = i;
        double d5 = (i2 == 0 ? 360.0d : 25.0d) + d4;
        double d6 = 0.017453292519943295d * d2;
        double angleDiff = angleDiff(i2, d4, d6);
        double angleDiff2 = angleDiff(i2, d5, d6);
        if (angleDiff < angleDiff2) {
            angleDiff2 -= 6.283185307179586d;
        }
        int i3 = 0;
        double d7 = 0.0d;
        double d8 = 1.0d;
        while (true) {
            double d9 = angleDiff;
            angleDiff = d3;
            double d10 = d9;
            if (i3 >= 10) {
                return d7;
            }
            double d11 = (angleDiff - d10) / (d5 - d4);
            if (Math.abs(d11) > 1.0E-15d) {
                d8 = d11;
            }
            double d12 = d4 - (d10 / d8);
            d3 = angleDiff(i2, d12, d6);
            if (d3 > 1.0d) {
                d3 -= 6.283185307179586d;
            }
            if (Math.abs(d3) < 1.0E-8d) {
                return d12;
            }
            i3++;
            d7 = d12;
            d4 = d5;
            d5 = d7;
        }
    }

    public static String[] getSolarTerms(int i) {
        String[] strArr = new String[24];
        int i2 = i - 1;
        String[] solarTermsPreOffset = getSolarTermsPreOffset(i2);
        String[] solarTermsNextOffset = getSolarTermsNextOffset(i2);
        System.arraycopy(solarTermsPreOffset, 0, strArr, 0, solarTermsPreOffset.length);
        System.arraycopy(solarTermsNextOffset, 0, strArr, 22, solarTermsNextOffset.length);
        double d = ((double) (i - 2000)) * 365.2422d;
        for (int i3 = 0; i3 < 19; i3++) {
            Time fromJulian = setFromJulian(getTimeFromAngle((((double) i3) * 15.2d) + d, (double) (i3 * 15), 0) + J2000 + 0.3333333333333333d, true);
            strArr[i3 + 3] = fromJulian.toString() + SOLAR_TERMS[i3];
        }
        return strArr;
    }

    private static String[] getSolarTermsPreOffset(int i) {
        String[] strArr = new String[3];
        double d = ((double) (i - 2000)) * 365.2422d;
        for (int i2 = 21; i2 < 24; i2++) {
            Time fromJulian = setFromJulian(getTimeFromAngle((((double) i2) * 15.2d) + d, (double) (i2 * 15), 0) + J2000 + 0.3333333333333333d, true);
            strArr[i2 - 21] = fromJulian.toString() + SOLAR_TERMS[i2];
        }
        return strArr;
    }

    private static String[] getSolarTermsNextOffset(int i) {
        String[] strArr = new String[2];
        double d = ((double) (i - 2000)) * 365.2422d;
        for (int i2 = 19; i2 < 21; i2++) {
            Time fromJulian = setFromJulian(getTimeFromAngle((((double) i2) * 15.2d) + d, (double) (i2 * 15), 0) + J2000 + 0.3333333333333333d, true);
            strArr[i2 - 19] = fromJulian.toString() + SOLAR_TERMS[i2];
        }
        return strArr;
    }

    private static class Nutation {
        /* access modifiers changed from: private */
        public double Lon;
        /* access modifiers changed from: private */
        public double Obl;

        private Nutation() {
        }
    }

    private static class Time {
        /* access modifiers changed from: private */
        public double day;
        /* access modifiers changed from: private */
        public double hour;
        /* access modifiers changed from: private */
        public double minute;
        /* access modifiers changed from: private */
        public double month;
        /* access modifiers changed from: private */
        public double second;
        /* access modifiers changed from: private */
        public double year;

        private Time() {
        }

        static /* synthetic */ double access$008(Time time) {
            double d = time.year;
            time.year = 1.0d + d;
            return d;
        }

        static /* synthetic */ double access$110(Time time) {
            double d = time.month;
            time.month = d - 1.0d;
            return d;
        }

        public String toString() {
            return SolarTermUtil.doubleToString(this.year) + SolarTermUtil.doubleToString(this.month) + SolarTermUtil.doubleToString(this.day);
        }
    }

    /* access modifiers changed from: private */
    public static String doubleToString(double d) {
        int i = (int) d;
        if (d >= 10.0d) {
            return String.valueOf(i);
        }
        return "0" + i;
    }
}
